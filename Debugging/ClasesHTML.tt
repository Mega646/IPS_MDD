<#@ template inherits="Microsoft.VisualStudio.TextTemplating.VSHost.ModelingTextTransformation"
language="C#" hostspecific="True" #>
<#@ output extension=".html" #>
<#@ JSRBBRProyectoIPS processor="JSRBBRProyectoIPSDirectiveProcessor" requires="fileName='Sample.JSRBBR_DSLProyectoIPS'" #>

<#@ include file="EF.utility.CS.ttinclude" #>
<#
var fileManager=EntityFrameworkTemplateFileManager.Create(this);

foreach (Clase clase in this.TapizClases.Clase)
{
	fileManager.StartNewFile(clase.nombre + "html");
	string nombreClase = clase.GetType().Name;
	#>

<html>
	<head>
		<title><#=clase.nombre#></title>
	</head>
	<body>
		<div style='border:1px solid black; margin:20px'>
		
	<#
	string codigoColorFondo = "#FFFFFF";
	string codigoColorNombre = "#FFFFFF";
	string fuente = "Arial";
	string alineacion = "center";
	if(clase is ClaseEnriquecida)
	{
		ClaseEnriquecida claseEnriq = (ClaseEnriquecida)clase;
		switch(claseEnriq.colorFondo)
		{
			case Color.Amarillo:	
				codigoColorFondo = "#FFFF00";
				break;
			case Color.Verde:
				codigoColorFondo = "#9CCC9C";
				break;
			case Color.Azul:
				codigoColorFondo = "#2A9DF4";
				break;
		}
		switch(claseEnriq.colorLetraNombre)
		{
			case Color.Amarillo:	
				codigoColorNombre = "#FFFF00";
				break;
			case Color.Verde:
				codigoColorNombre = "#9CCC9C";
				break;
			case Color.Azul:
				codigoColorNombre = "#2A9DF4";
				break;
		}
		switch(claseEnriq.tipoLetraNombre)
		{
			case Fuente.Arial:
				fuente = "Arial";
				break;
			case Fuente.ComicSans:
				fuente = "Comic Sans";
				break;
			case Fuente.Helvetica:
				fuente = "Helvetica";
				break;
		}
		switch(claseEnriq.alineacion)
		{
			case Alineacion.Izquierda:
				alineacion = "left";
				break;
			case Alineacion.Centro:
				alineacion = "center";
				break;
			case Alineacion.Derecha:
				alineacion = "right";
				break;
		}
	}
	#>

			<p style='background-color:<#=codigoColorFondo#>;color:<#=codigoColorNombre#>;font-weight:bold; font-family:
			<#=fuente#>; text-align:<#=alineacion#>'><#=clase.nombre#> <br />
			<form name=<#=clase.nombre#> style='background-color:<#=codigoColorFondo#>;color:<#=codigoColorNombre#>;fontfamily:<#=fuente#>;text-align:<#=alineacion#>;'>
 
<!‐‐Definimos una tabla en la que incluir todos los atributos de la clase con la etiqueta
table‐‐>
				<table>
<!‐‐Para cada atributo de la clase, en este caso numMat, nombre, apellido1 y apellido2, se
genera una etiqueta con el nombre del atributo y un campo de texto para introducir su
valor. Tanto la etiqueta como el campo de texto coincidirán en estilo. En este caso se ha
especificado el color y el tipo de la fuente, si la clase es:  
‐ Normal: Se pondrán unos valores por defecto con los que se generarán todos los
atributos.
‐ Enriquecida: Se generará el código inyectando el valor que contengan las
propiedades Tipo de letra y Color de letra del estilo de atributo definido en la
clase enriquecida. Si el atributo es de tipo boolean y el formato de atributo
booleano (indicado en estilo) es checkbox o radioButton, en vez del campo de texto
que acompaña a la etiqueta se generará un campo checkbox o radio button, según
corresponda.  
‐‐>

	<#
	string tipoLetra = "Arial";
	string colorLetra = "#000000";
	string booleano = "text";
	if(clase is ClaseEnriquecida)
	{
		ClaseEnriquecida claseEnriq = (ClaseEnriquecida)clase;
		foreach(AtributoEnriquecido atrEnriq in claseEnriq.AtributoEnriquecido)
		{
			switch(atrEnriq.tipoLetra)
			{
				case Fuente.Arial:
					tipoLetra = "Arial";
					break;
				case Fuente.ComicSans:
					tipoLetra = "Comic Sans";
					break;
				case Fuente.Helvetica:
					tipoLetra = "Helvetica";
					break;
			}
			switch(atrEnriq.colorLetra)
			{
				case Color.Amarillo:
					colorLetra = "#FFFF00";
					break;
				case Color.Azul:
					colorLetra = "#2A9DF4";
					break;
				case Color.Verde:
					colorLetra = "#9CCC9C";
					break;
			}
			switch(atrEnriq.booleano)
			{
				case atributoBool.checkbox:
					booleano = "checkbox";
					break;
				case atributoBool.radioButton:
					booleano = "radiobutton";
					break;
				case atributoBool.text:
					booleano = "text";
					break;
			}
			#>

			<tr>
				<td style='<#=colorLetra#>';font-family:<#=tipoLetra#>;'><#=clase.Atributo.nombre#>:</td>
				<td>
					<input type='<#=booleano#>' name='numMat' style='color:#000000;font-family:Arial;' />
				</td>
			</tr>

			<#
		}
	}
	#>

<!‐‐Cerramos la etiqueta table‐‐>
</table>
<!‐‐Se genera un botón con el nombre del método. Se considerarán los siguientes casos:
‐ Para cada clase los métodos constructor y destructor
‐ Para cada atributo los métodos get y set, en este caso getNumMat, setNumMat,
getNombre, setNombre, getApellido1, setApellido1 y getApellido2, setApellido2,  
‐ Para cada uno de los métodos adicionales que defina el usuario en la clase
Dicho botón contendrá el nombre del método con el color de letra y el tipo de la letra
del método, si la clase es:  
‐ Normal: Se pondrán unos valores por defecto con los que se generarán todos los
métodos.
‐ Enriquecida: Se generará el código inyectando el valor que contengan las
propiedades color de letra y el tipo de la letra del estilo de método definido en
la clase enriquecida.
‐‐>
<input type='submit' name='constructor' value='constructor' style='backgroundcolor:#0088ff;color:#ffffff;font-family:Arial;' />&nbsp;&nbsp;
<input type='submit' name='destructor' value='destructor' style='backgroundcolor:#0088ff;color:#ffffff;font-family:Arial;' />&nbsp;&nbsp;
<input type='submit' name='getNumMat' value='getNumMat' style='backgroundcolor:#0088ff;color:#ffffff;font-family:Arial;' />&nbsp;&nbsp;
<input type='submit' name='setNumMat' value='setNumMat' style='backgroundcolor:#0088ff;color:#ffffff;font-family:Arial;' />&nbsp;&nbsp;
<input type='submit' name='getNombre' value='getNombre' style='backgroundcolor:#0088ff;color:#ffffff;font-family:Arial;' />&nbsp;&nbsp;
<input type='submit' name='setNombre' value='setNombre' style='backgroundcolor:#0088ff;color:#ffffff;font-family:Arial;' />&nbsp;&nbsp;
<input type='submit' name='getApellido1' value='getApellido1' style='backgroundcolor:#0088ff;color:#ffffff;font-family:Arial;' />&nbsp;&nbsp;
<input type='submit' name='setApellido1' value='setApellido1' style='backgroundcolor:#0088ff;color:#ffffff;font-family:Arial;' />&nbsp;&nbsp; 
<input type='submit' name='getApellido2' value='getApellido2' style='backgroundcolor:#0088ff;color:#ffffff;font-family:Arial;' />&nbsp;&nbsp;
<input type='submit' name='setApellido2' value='setApellido2' style='backgroundcolor:#0088ff;color:#ffffff;font-family:Arial;' />&nbsp;&nbsp;
<!‐‐Cerramos las etiquetas del formulario, div y html ‐‐>
			</form>
		</div>
	</html> 
<#
} 
#>
 // cierra el proceso de creación de ficheros del documento. Debe hacerse
 // antes de empezar a declarar funciones de la plantilla
fileManager.Process(); 


<#@ template inherits="Microsoft.VisualStudio.TextTemplating.VSHost.ModelingTextTransformation"
language="C#" hostspecific="True" #>
<#@ output extension=".html" #>
<#@ JSRBBRProyectoIPS processor="JSRBBRProyectoIPSDirectiveProcessor" requires="fileName='Sample.JSRBBR_DSLProyectoIPS'" #>

<#@ include file="EF.utility.CS.ttinclude" #>
<#
var fileManager=EntityFrameworkTemplateFileManager.Create(this);


foreach (Clase clase in this.TapizClases.Clase)
{
	if(clase is ClaseAbstracta)
	{
		continue;
	}
	fileManager.StartNewFile(clase.nombre + ".html");
	#>

<html>
	<head>
		<title><#=clase.nombre#></title>
	</head>
	<body>
		<div style='border:1px solid black; margin:20px'>
		
	<#

	//AQUI EMPIEZAN LAS CLASES

	string codigoColorFondo = "#FFFFFF";
	string codigoColorNombre = "#FFFFFF";
	string fuente = "Arial";
	string alineacion = "center";
	if(clase is ClaseEnriquecida)
	{
		ClaseEnriquecida claseEnriq = (ClaseEnriquecida)clase;
		codigoColorFondo = GetColorHTML(claseEnriq.colorFondo);
		codigoColorNombre = GetColorHTML(claseEnriq.colorLetraNombre);
		fuente = GetTipoLetraHTML(claseEnriq.tipoLetraNombre);
		alineacion = GetAlineacionHTML(claseEnriq.alineacion);
	}
	#>

			<p style='background-color:<#=codigoColorFondo#>;color:<#=codigoColorNombre#>;font-weight:bold; font-family:
			<#=fuente#>; text-align:<#=alineacion#>'><#=clase.nombre#> <br />
			<form name=<#=clase.nombre#> style='background-color:<#=codigoColorFondo#>;color:<#=codigoColorNombre#>;fontfamily:<#=fuente#>;text-align:<#=alineacion#>;'>
				<table>

	<#

	//AQUI EMPIEZAN LOS ATRIBUTOS

	string tipoLetra = "Arial";
	string colorLetra = "#000000";
	string booleano = "text";
	string nombreAtributo = "";

	LinkedList<AtributoPadre> atrList = clase.getAtributos();
	if(atrList.Count > 0)
	{
		foreach(AtributoPadre atr in atrList)
		{
			if(atr is AtributoEnriquecido)
			{
				AtributoEnriquecido atrEnriq = (AtributoEnriquecido)atr;

				tipoLetra = GetTipoLetraHTML(atrEnriq.tipoLetra);
				colorLetra = GetColorHTML(atrEnriq.colorLetra);
				booleano = GetBoolHTML(atrEnriq.booleano);
			}
		#>
			<tr>
				<td style='<#=colorLetra#>';font-family:<#=tipoLetra#>;'><#=atr.nombre#>:</td>
				<td>
					<input type='<#=booleano#>' name='<#=atr.nombre#>' style='color:#000000;font-family:Arial;' />
				</td>
			</tr>
		<#
		}
	}
	
	#>
			</table>
	<#

	//AQUI EMPIEZAN LAS OPERACIONES

	tipoLetra = "Arial";
	colorLetra = "#000000";
	nombreAtributo = "";
	LinkedList<Operacion> opList = clase.getOperaciones();
	//CONSTRUCTOR Y DESTRUCTOR

	#>
		<input type='submit' name='constructor' value='constructor' style='backgroundcolor:#0088ff;color:#000000;font-family:Arial' />&nbsp;&nbsp;
		<input type='submit' name='destructor' value='destructor' style='backgroundcolor:#0088ff;color:#000000;font-family:Arial' />&nbsp;&nbsp;
	<#

	// GETTERS Y SETTERS
	if(atrList.Count > 0)
	{
		foreach(AtributoPadre atr in atrList)
		{
			#>
			<input type='submit' name='get<#=atr.nombre#>' value='get<#=atr.nombre#>' style='backgroundcolor:#0088ff;color:<#=colorLetra#>;font-family:<#=tipoLetra#>;' />&nbsp;&nbsp;
			<input type='submit' name='set<#=atr.nombre#>' value='set<#=atr.nombre#>' style='backgroundcolor:#0088ff;color:<#=colorLetra#>;font-family:<#=tipoLetra#>;' />&nbsp;&nbsp;
			<#
		}
	}

	// OPERACIONES DEFINIDAS POR EL USUARIO
	if(clase.Operacion.Count > 0)
	{
		foreach(Operacion op in opList)
		{
			if(op is OperacionEnriquecida)
			{
				OperacionEnriquecida opEnriq = (OperacionEnriquecida)op;
				tipoLetra = GetTipoLetraHTML(opEnriq.tipoLetra);
				colorLetra = GetColorHTML(opEnriq.colorLetra);
			}
			#>
			<input type='submit' name='<#=op.nombre#>' value='<#=op.nombre#>' style='backgroundcolor:#0088ff;color:<#=colorLetra#>;font-family:<#=tipoLetra#>;' />&nbsp;&nbsp;
			<#
		}
	}

	// AQUI EMPIEZAN LAS RELACIONES

	foreach(ClaseReferencesTargetClase r in ClaseReferencesTargetClase.GetLinksToTargetClase(clase))
	{
		fileManager.StartNewFile(r.nombre + ".html");
		codigoColorFondo = "#FFFFFF";
		codigoColorNombre = "#FFFFFF";
		tipoLetra = "Arial";
		colorLetra = "#000000";
		nombreAtributo = "";
		#>
		<html>
			<head>
				<title><#=r.nombre#></title>
			</head>
			<body>
				<div style='border:1px solid black; margin:20px'>
				<p style='background-color:<#=codigoColorFondo#>;color:<#=codigoColorNombre#>;font-weight:bold; font-family:
				<#=fuente#>; text-align:<#=alineacion#>'><#=clase.nombre#> <br />
				<form name=<#=clase.nombre#> style='background-color:<#=codigoColorFondo#>;color:<#=codigoColorNombre#>;fontfamily:<#=fuente#>;text-align:<#=alineacion#>;'>
		<#

		#>
				<table>
					<tr>
						<td style='<#=colorLetra#>';font-family:<#=tipoLetra#>;'><#=r.TargetClase.nombre#>:</td>
						<td>
							<input type='<#=booleano#>' name='<#=r.TargetClase.nombre#>' style='color:#000000;font-family:Arial;' />
						</td>
					</tr>
					<tr>
						<td style='<#=colorLetra#>';font-family:<#=tipoLetra#>;'><#=r.SourceClase.nombre#>:</td>
						<td>
							<input type='<#=booleano#>' name='<#=r.SourceClase.nombre#>' style='color:#000000;font-family:Arial;' />
						</td>
					</tr>
				</table>
				<input type='submit' name='constructor' value='constructor' style='backgroundcolor:#0088ff;color:#000000;font-family:Arial' />&nbsp;&nbsp;
				<input type='submit' name='destructor' value='destructor' style='backgroundcolor:#0088ff;color:#000000;font-family:Arial' />&nbsp;&nbsp;
		<#
	}
	#>
				</form>
			</div>
		</body>
	</html> 
<#
}
fileManager.Process();
#>

<#+
private String GetColorHTML(Color color)
{
	string codigoColorHTML = "";
	switch(color)
	{
		case Color.Amarillo:	
			codigoColorHTML = "#FFFF00";
			break;
		case Color.Verde:
			codigoColorHTML = "#9CCC9C";
			break;
		case Color.Azul:
			codigoColorHTML = "#2A9DF4";
			break;
	}
	return codigoColorHTML;
}
#>

<#+
private String GetTipoLetraHTML(Fuente tipoLetra)
{
	string fuenteHTML = "";
	switch(tipoLetra)
	{
		case Fuente.Arial:
			fuenteHTML = "Arial";
			break;
		case Fuente.ComicSans:
			fuenteHTML = "Comic Sans";
			break;
		case Fuente.Helvetica:
			fuenteHTML = "Helvetica";
			break;
	}
	return fuenteHTML;
}
#>

<#+
private String GetAlineacionHTML(Alineacion alineacion)
{
	string alineacionHTML = "";
	switch(alineacion)
	{
		case Alineacion.Izquierda:
			alineacionHTML = "left";
			break;
		case Alineacion.Centro:
			alineacionHTML = "center";
			break;
		case Alineacion.Derecha:
			alineacionHTML = "right";
			break;
	}
	return alineacionHTML;
}
#>

<#+
private String GetBoolHTML(atributoBool booleano)
{
	string booleanoHTML = "";
	switch(booleano)
	{
		case atributoBool.checkbox:
			booleanoHTML = "checkbox";
			break;
		case atributoBool.radioButton:
			booleanoHTML = "radiobutton";
			break;
		case atributoBool.text:
			booleanoHTML = "text";
			break;
	}
	return booleanoHTML;
}
#>